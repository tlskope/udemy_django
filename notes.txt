Udemy course (leriosted@gmail.com): Python Django - The Practical Guide by Maximilian Schwarzmuller

Django

- Python web dev framework.
- Framework not a library, because there is clear guidance.
- Literature structure.
- Built for Python 3
- Batteries included meaning built-in solutions exist without requirements for other packages etc
- Still customisable.
- Not a small framework, can be used for enterprise level applications.

Pre requirements

- Python basics (no prior Django)
- Web basics (how framework works, not specific)

Course Contents

- Foundation
- Advanced
- Real-world applications 

    Foundation 

        Setup & Understanding Django Projects
        URLs, Routes, & Views
        Templates & Static Files
        Data, Models, & Relationships

    Advanced (Beyond the basics)
        Working with forms
        Class based Views
        File uploads
        Sessions

    Many small examples
    A real project (Building a blog)
    Frontend + Admin
    Deployment (Real deployment)

Setup in VSCode

    - Venv
    - Python extension
    - autopep8 extension

Create a new project in Django 

django-admin startproject mypage 

File Structure in Django Projects

ProjectName Folder
    __init__ (makes the folder importable)
    asgi.py (used for deployment)
    settings.py (add features, and adjust behaviours)
    urls.py (used to add more pages to the web application)
    wsgi.py (used for deployment)

Setup a development server (to preview and test)

python manage.py runserver 8080 (specifying port is optional)

mypage (project)
    challenges (app or module)

google
    maps
    images 
    search 

amazon
    shop
    prime
    music

Online shop
    Products
    Cart 
    Admin Area 

URLs
    Pathways / Routes of where links go to 
    Trigger certain actions 
    Triggers requests

Views
    Views are the actions that the URLs trigger 
    They are made of Python code that call on HTML and HTTP methods
    Handles a request
    Load data 
    Run business logic
    Prepare a response

TO MAIN TYPES OF VIEWS:

    Functions
    Classes

URL and View Cycle

USER --> Request  --> Server 
     <-- Response <--   ^
                        |
                        v
                        Database (Optional)

Note to import a function you use syntax such as:

from django.http import HttpResponse

Then to instantuate the function (run the function as an instance) you use the following syntax in the script:

HttpResponse()

An example of a views file with multiple functions: 

from django.shortcuts import render
from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect

# Create your views here.

monthly_challenges = {
    "january": "This is the january challenge.",
    "february": "This is the february challenge.",
    "march": "This is the march challenge.",
    "april": "This is the april challenge.",
    "may": "This is the may challenge.",
    "june": "This is the june challenge.",
    "july": "This is the july challenge.",
    "august": "This is the august challenge.",
    "september": "This is the september challenge.",
    "october": "This is the october challenge.",
    "november": "This is the november challenge.",
    "december": "This is the december challenge.",
}

def monthly_challenge_by_number(request, month):
    months = list(monthly_challenges.keys())

    if month > len(months):
        return HttpResponseNotFound("Error: Invalid Month")

    redirect_month = months[month -1]
    return HttpResponseRedirect("/challenges/" + redirect_month)

def monthly_challenge(request, month):
    try:
        challenge_text = monthly_challenges[month]
        return HttpResponse(challenge_text)
    except:
        return HttpResponseNotFound("This month is not supported.")

The urls.py in the monthly_challenges App folder:

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path("challenges/", include("challenges.urls"))
]

And the urls.py in the challenges folder: 

from django.urls import path 
from . import views

urlpatterns = [
    path("<int:month>", views.monthly_challenge_by_number),
    path("<str:month>", views.monthly_challenge),
]

Important to note that with the way that the views have been setup with the multiple functions,
if any more months need to be added to the dictionary - it does not affect any of the function 
code itself. You can simply add one more item to the dictionary. 

This is a key consideration. Making sure that the app is scalable.

However, there is an issue with the scalability of the example above. The url: "/challenges/" has 
been hard coded into the script. This creates an issue if the url is changed for some reason at a 
later time.

<< PROCESS OF HOW TO CREATE A NEW PAGE >>

For this example we are creating the index page which has a list of all of the other pages. 

1. Create a URL in the urls.py file in the challenges app. 

To do this we add to the list of urlpatterns:

urlpatterns = [
    path(""),
]

2. Create another function in the views that will be called when the URL request is actioned.





